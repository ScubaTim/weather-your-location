{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lon: null\n    };\n\n    this.getWeather = async () => {\n      const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=London&appid=fdca481f9e858844aede00aa6a7749c2`).catch(err => console.log(err));\n      const weather = response.json();\n      console.log(weather);\n    };\n\n    this.handleClick = () => {\n      console.log('button clicked');\n    };\n  }\n\n  componentDidMount() {\n    const getCoordinates = () => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    };\n\n    console.log(getCoordinates());\n    /*\n    const getLocation = () => {\n        if ('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({ lat: position.coords.latitude, lon: position.coords.longitude });\n            });\n        } else {\n            alert(\"Geolocation Failed. This usually means access was denied or HTTPS isn't running.\");\n        }\n    }\n    getLocation();*/\n  }\n\n  render() {\n    this.getWeather();\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n      lat: this.state.lat,\n      lon: this.state.lon,\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js"],"names":["React","Component","Row","Col","WeatherDisplay","App","state","lat","lon","getWeather","response","fetch","catch","err","console","log","weather","json","handleClick","componentDidMount","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,YAAzB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,KADwB,GAChB;AACJC,MAAAA,GAAG,EAAE,IADD;AAEJC,MAAAA,GAAG,EAAE;AAFD,KADgB;;AAAA,SA0BxBC,UA1BwB,GA0BX,YAAY;AACrB,YAAMC,QAAQ,GAAI,MAAMC,KAAK,CAAE,oIAAF,CAAL,CAA4IC,KAA5I,CAAkJC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAzJ,CAAxB;AACA,YAAMG,OAAO,GAAGN,QAAQ,CAACO,IAAT,EAAhB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACH,KA9BuB;;AAAA,SAgCxBE,WAhCwB,GAgCV,MAAM;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAlCuB;AAAA;;AAMxBI,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,cAAc,GAAG,MAAM;AACzB,aAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1CC,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD;AACH,OAFM,CAAP;AAGH,KAJD;;AAKAT,IAAAA,OAAO,CAACC,GAAR,CAAYK,cAAc,EAA1B;AACA;;;;;;;;;;;AAWH;;AAYDO,EAAAA,MAAM,GAAG;AACL,SAAKlB,UAAL;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,GAAG,EAAE,KAAKA,KAAL,CAAWC,GADpB;AAEI,MAAA,GAAG,EAAE,KAAKD,KAAL,CAAWE,GAFpB;AAGI,MAAA,WAAW,EAAE,KAAKU,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CADJ;AAaH;;AArDuB;;AAsD3B;AAED,eAAeb,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lon: null\n    }\n\n    componentDidMount() {\n        const getCoordinates = () => {\n            return new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n        }\n        console.log(getCoordinates())\n        /*\n        const getLocation = () => {\n            if ('geolocation' in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.setState({ lat: position.coords.latitude, lon: position.coords.longitude });\n                });\n            } else {\n                alert(\"Geolocation Failed. This usually means access was denied or HTTPS isn't running.\");\n            }\n        }\n        getLocation();*/\n    }\n\n    getWeather = async () => {\n        const response = (await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=London&appid=fdca481f9e858844aede00aa6a7749c2`).catch(err => console.log(err)));\n        const weather = response.json()\n        console.log(weather);\n    }\n\n    handleClick = () => {\n        console.log('button clicked');\n    }\n\n    render() {\n        this.getWeather();\n        console.log(this.state)\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <WeatherDisplay\n                            lat={this.state.lat}\n                            lon={this.state.lon}\n                            handleClick={this.handleClick}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
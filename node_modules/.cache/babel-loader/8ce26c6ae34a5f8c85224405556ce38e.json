{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lon: null,\n      temp: null,\n      highTemp: null,\n      lowTemp: null,\n      percip: ''\n    };\n\n    this.getWeather =\n    /*async*/\n    () => {\n      //Get Weather data from API with coordinates from state\n      //const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n      //const weather = await response.json()\n      // Set current tempurature: weather.main.temp is the current tempurature in Kelvin, convert it to Farenheit\n      //const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n      //Update the state with current Tempurature in F\n      this.setState({\n        temp: `50 ${'&#176; F'}`,\n        highTemp: '100 &#176;F',\n        lowTemp: '100 &#176;F',\n        percip: '75%'\n      });\n    };\n\n    this.clickHandler = () => {\n      this.getWeather();\n    };\n\n    this.renderContent = () => {\n      if (this.state.lon) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n          lat: this.state.lat,\n          lon: this.state.lon,\n          temp: this.state.temp,\n          highTemp: this.state.highTemp,\n          lowTemp: this.state.lowTemp,\n          percip: this.state.percip,\n          onClick: this.clickHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }\n        }))));\n      } else {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }, \"Acquiring Device Coordinates\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }));\n  }\n\n  render() {\n    return this.renderContent();\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js"],"names":["React","Component","Row","Col","WeatherDisplay","App","state","lat","lon","temp","highTemp","lowTemp","percip","getWeather","setState","clickHandler","renderContent","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,YAAzB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,KADwB,GAChB;AACJC,MAAAA,GAAG,EAAE,IADD;AAEJC,MAAAA,GAAG,EAAE,IAFD;AAGJC,MAAAA,IAAI,EAAE,IAHF;AAIJC,MAAAA,QAAQ,EAAE,IAJN;AAKJC,MAAAA,OAAO,EAAE,IALL;AAMJC,MAAAA,MAAM,EAAE;AANJ,KADgB;;AAAA,SAgBxBC,UAhBwB;AAgBX;AAAU,UAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAG,MAAK,UAAW,EAAzB;AAA4BC,QAAAA,QAAQ,EAAE,aAAtC;AAAqDC,QAAAA,OAAO,EAAE,aAA9D;AAA6EC,QAAAA,MAAM,EAAE;AAArF,OAAd;AACH,KAxBuB;;AAAA,SA0BxBG,YA1BwB,GA0BT,MAAM;AACjB,WAAKF,UAAL;AACH,KA5BuB;;AAAA,SA8BxBG,aA9BwB,GA8BR,MAAM;AAClB,UAAI,KAAKV,KAAL,CAAWE,GAAf,EAAoB;AAChB,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,cAAD;AACI,UAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,GADpB;AAEI,UAAA,GAAG,EAAE,KAAKD,KAAL,CAAWE,GAFpB;AAGI,UAAA,IAAI,EAAE,KAAKF,KAAL,CAAWG,IAHrB;AAII,UAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,QAJzB;AAKI,UAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,OALxB;AAMI,UAAA,MAAM,EAAE,KAAKL,KAAL,CAAWM,MANvB;AAOI,UAAA,OAAO,EAAE,KAAKG,YAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,CADJ,CADJ;AAiBH,OAlBD,MAkBO;AACH,4BAAQ;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAR;AACH;AACJ,KApDuB;AAAA;;AAUxBE,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAI,KAAKR,QAAL,CAAc;AAAEP,MAAAA,GAAG,EAAEe,QAAQ,CAACC,MAAT,CAAgBC,QAAvB;AAAiChB,MAAAA,GAAG,EAAEc,QAAQ,CAACC,MAAT,CAAgBE;AAAtD,KAAd,CADhB;AAGH;;AAwCDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKV,aAAL,EAAP;AACH;;AAxDuB;;AAyD3B;AAED,eAAeX,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lon: null,\n        temp: null,\n        highTemp: null,\n        lowTemp: null,\n        percip: ''\n    }\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude, lon: position.coords.longitude }),\n        );\n    }\n\n    getWeather = /*async*/ () => {\n        //Get Weather data from API with coordinates from state\n        //const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n        //const weather = await response.json()\n        // Set current tempurature: weather.main.temp is the current tempurature in Kelvin, convert it to Farenheit\n        //const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n        //Update the state with current Tempurature in F\n        this.setState({ temp: `50 ${'&#176; F'}`, highTemp: '100 &#176;F', lowTemp: '100 &#176;F', percip: '75%' })\n    }\n\n    clickHandler = () => {\n        this.getWeather();\n    }\n\n    renderContent = () => {\n        if (this.state.lon) {\n            return (\n                <div>\n                    <Row>\n                        <Col>\n                            <WeatherDisplay\n                                lat={this.state.lat}\n                                lon={this.state.lon}\n                                temp={this.state.temp}\n                                highTemp={this.state.highTemp}\n                                lowTemp={this.state.lowTemp}\n                                percip={this.state.percip}\n                                onClick={this.clickHandler}\n                            />\n                        </Col>\n                    </Row>\n                </div>\n            )\n        } else {\n            return (<h1 className=\"text-center\">Acquiring Device Coordinates</h1>)\n        }\n    }\n\n    render() {\n        return this.renderContent();\n    }\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
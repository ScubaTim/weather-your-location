{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport LandingButton from '../LandingButton';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lon: null,\n      temp: null,\n      highTemp: null,\n      lowTemp: null,\n      percip: ''\n    };\n\n    this.getWeather = async () => {\n      const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n      const weather = await response.json(); //const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n\n      console.log(tempInF);\n      this.setState({\n        temp: 'tempInF',\n        highTemp: '100',\n        lowTemp: '100',\n        percip: '75%'\n      });\n    };\n\n    this.handleLaunch = () => {\n      this.getWeather();\n\n      if (this.state.lat) {}\n    };\n\n    this.renderContent = () => {\n      if (!this.state.temp) return /*#__PURE__*/React.createElement(Row, {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(LandingButton, {\n        handleLaunch: this.handleLaunch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      })));\n\n      if (!this.state.lat) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }\n        }, \"Loading.......\");\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n        lat: this.state.lat,\n        lon: this.state.lon,\n        temp: this.state.temp,\n        highTemp: this.state.highTemp,\n        lowTemp: this.state.lowTemp,\n        percip: this.state.percip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }))));\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }));\n  }\n\n  render() {\n    return this.renderContent();\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js"],"names":["React","Component","Row","Col","LandingButton","WeatherDisplay","App","state","lat","lon","temp","highTemp","lowTemp","percip","getWeather","response","fetch","catch","err","console","log","weather","json","tempInF","setState","handleLaunch","renderContent","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport LandingButton from '../LandingButton';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lon: null,\n        temp: null,\n        highTemp: null,\n        lowTemp: null,\n        percip: ''\n    }\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude, lon: position.coords.longitude }),\n        );\n    }\n\n    getWeather = async () => {\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n        const weather = await response.json()\n        //const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n        console.log(tempInF);\n        this.setState({ temp: 'tempInF', highTemp: '100', lowTemp: '100', percip: '75%' })\n    }\n\n    handleLaunch = () => {\n        this.getWeather();\n        if (this.state.lat) {\n\n        }\n    }\n\n    renderContent = () => {\n        if (!this.state.temp)\n            return (\n                <Row className=\"text-center\">\n                    <Col>\n                        <LandingButton\n                            handleLaunch={this.handleLaunch}\n                        />\n                    </Col>\n                </Row>\n            );\n\n        if (!this.state.lat) {\n            return (\n                <div>Loading.......</div>\n            )\n        }\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <WeatherDisplay\n                            lat={this.state.lat}\n                            lon={this.state.lon}\n                            temp={this.state.temp}\n                            highTemp={this.state.highTemp}\n                            lowTemp={this.state.lowTemp}\n                            percip={this.state.percip}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    render() {\n        return this.renderContent();\n    }\n};\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}
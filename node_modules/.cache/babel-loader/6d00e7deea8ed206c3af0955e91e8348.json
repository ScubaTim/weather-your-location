{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport LandingButton from '../LandingButton';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lon: null,\n      temp: null,\n      highTemp: null,\n      lowTemp: null,\n      humidity: null,\n      message: '',\n      icon: ''\n    };\n\n    this.getLocation = () => {\n      window.navigator.geolocation.getCurrentPosition(position => this.setState({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude\n      }));\n    };\n\n    this.getWeather = async () => {\n      if (this.state.lat) {\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n        const weather = await response.json();\n        console.log(weather);\n        const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n        const maxInF = Math.floor(weather.main.temp_max * 9 / 5 - 459.67);\n        const minInF = Math.floor(weather.main.temp_min * 9 / 5 - 459.67);\n        const humidity = weather.main.humidity;\n        const message = weather.weather[0].description.toUpperCase();\n        const windSpeed = weather.weather[0];\n        console.log(windSpeed);\n        this.setState({\n          temp: tempInF,\n          highTemp: maxInF,\n          lowTemp: minInF,\n          humidity: humidity,\n          message: message\n        });\n      }\n    };\n\n    this.handleLaunch = () => {\n      this.getWeather();\n\n      if (this.state.lat && !this.state.humidity) {\n        return /*#__PURE__*/React.createElement(Row, {\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          style: {\n            marginTop: '25vh'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        }, \"Loading weather data....\")));\n      }\n    };\n\n    this.renderContent = () => {\n      //Loaded With all null, start finding location\n      this.getLocation(); //If no location yet, show finding location\n\n      if (!this.state.lat) {\n        return /*#__PURE__*/React.createElement(Row, {\n          className: \"text-center display-font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          style: {\n            marginTop: '25vh'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }\n        }, \"ACQUIRING GPS COORDINATES....\")));\n      } //If location found show get weather button\n\n\n      if (this.state.lat && !this.state.humidity) {\n        return /*#__PURE__*/React.createElement(Row, {\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(LandingButton //Landing button triggers weather API call\n        , {\n          handleLaunch: this.handleLaunch,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }\n        })));\n      } //If location and weather, show weather display component\n\n\n      if (this.state.lat && this.state.humidity) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n          lat: this.state.lat,\n          lon: this.state.lon,\n          temp: this.state.temp,\n          highTemp: this.state.highTemp,\n          lowTemp: this.state.lowTemp,\n          humidity: this.state.humidity,\n          message: this.state.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }\n        }))));\n      }\n    };\n  }\n\n  render() {\n    return this.renderContent();\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js"],"names":["React","Component","Row","Col","LandingButton","WeatherDisplay","App","state","lat","lon","temp","highTemp","lowTemp","humidity","message","icon","getLocation","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","getWeather","response","fetch","catch","err","console","log","weather","json","tempInF","Math","floor","main","maxInF","temp_max","minInF","temp_min","description","toUpperCase","windSpeed","handleLaunch","marginTop","renderContent","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport LandingButton from '../LandingButton';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lon: null,\n        temp: null,\n        highTemp: null,\n        lowTemp: null,\n        humidity: null,\n        message: '',\n        icon: ''\n    }\n\n    getLocation = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude, lon: position.coords.longitude }),\n        );\n    }\n\n    getWeather = async () => {\n        if (this.state.lat) {\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=0317b02bce728aa1f3b87d5d6ad88a5d`).catch(err => console.log(err));\n            const weather = await response.json()\n            console.log(weather);\n            const tempInF = Math.floor(weather.main.temp * 9 / 5 - 459.67);\n            const maxInF = Math.floor(weather.main.temp_max * 9 / 5 - 459.67);\n            const minInF = Math.floor(weather.main.temp_min * 9 / 5 - 459.67);\n            const humidity = weather.main.humidity;\n            const message = weather.weather[0].description.toUpperCase()\n            const windSpeed = weather.weather[0];\n            console.log(windSpeed);\n            this.setState({ temp: tempInF, highTemp: maxInF, lowTemp: minInF, humidity: humidity, message: message })\n        }\n    }\n\n    handleLaunch = () => {\n        this.getWeather();\n        if (this.state.lat && !this.state.humidity) {\n            return (\n                <Row className=\"text-center\">\n                    <Col>\n                        <h1 style={{ marginTop: '25vh' }}>Loading weather data....</h1>\n                    </Col>\n                </Row>\n            )\n        }\n    }\n\n    renderContent = () => {\n        //Loaded With all null, start finding location\n        this.getLocation();\n        //If no location yet, show finding location\n        if (!this.state.lat) {\n            return (\n                <Row className=\"text-center display-font\">\n                    <Col>\n                        <h1 style={{ marginTop: '25vh' }}>ACQUIRING GPS COORDINATES....</h1>\n                    </Col>\n                </Row>\n            )\n        }\n        //If location found show get weather button\n        if (this.state.lat && !this.state.humidity) {\n            return (\n                <Row className=\"text-center\">\n                    <Col>\n                        <LandingButton\n                            //Landing button triggers weather API call\n                            handleLaunch={this.handleLaunch}\n                        />\n                    </Col>\n                </Row>\n            );\n        }\n        //If location and weather, show weather display component\n        if (this.state.lat && this.state.humidity) {\n            return (\n                <div>\n                    <Row>\n                        <Col>\n                            <WeatherDisplay\n                                lat={this.state.lat}\n                                lon={this.state.lon}\n                                temp={this.state.temp}\n                                highTemp={this.state.highTemp}\n                                lowTemp={this.state.lowTemp}\n                                humidity={this.state.humidity}\n                                message={this.state.message}\n                            />\n                        </Col>\n                    </Row>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return this.renderContent();\n    }\n};\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}
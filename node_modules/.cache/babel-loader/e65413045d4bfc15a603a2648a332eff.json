{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lon: null\n    };\n\n    this.handleClick = () => {\n      console.log('button clicked');\n    };\n  }\n\n  componentDidMount() {\n    const getLocation = () => {\n      if ('geolocation' in navigator) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.setState({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        });\n      } else {\n        alert(\"Geolocation Failed. This usually means access was denied or HTTPS isn't running.\");\n      }\n    };\n\n    getLocation();\n    console.log(this.state);\n\n    const getWeather = async () => {\n      const response = await await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=London&appid=fdca481f9e858844aede00aa6a7749c2`);\n      const weather = response.json();\n      console.log(weather);\n    };\n\n    getWeather().catch(error => {\n      console.log(\"There was an error:\", error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n      lat: this.state.lat,\n      lon: this.state.lon,\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/weather-your-location/src/components/App/index.js"],"names":["React","Component","Row","Col","WeatherDisplay","App","state","lat","lon","handleClick","console","log","componentDidMount","getLocation","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","alert","getWeather","response","fetch","weather","json","catch","error","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,YAAzB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,KADwB,GAChB;AACJC,MAAAA,GAAG,EAAE,IADD;AAEJC,MAAAA,GAAG,EAAE;AAFD,KADgB;;AAAA,SAgCxBC,WAhCwB,GAgCV,MAAM;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAlCuB;AAAA;;AAMxBC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,WAAW,GAAG,MAAM;AACtB,UAAI,iBAAiBC,SAArB,EAAgC;AAC5BA,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACnD,eAAKC,QAAL,CAAc;AAAEX,YAAAA,GAAG,EAAEU,QAAQ,CAACE,MAAT,CAAgBC,QAAvB;AAAiCZ,YAAAA,GAAG,EAAES,QAAQ,CAACE,MAAT,CAAgBE;AAAtD,WAAd;AACH,SAFD;AAGH,OAJD,MAIO;AACHC,QAAAA,KAAK,CAAC,kFAAD,CAAL;AACH;AACJ,KARD;;AASAT,IAAAA,WAAW;AACXH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;;AAGA,UAAMiB,UAAU,GAAG,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAO,MAAMC,KAAK,CAAE,oIAAF,CAAnC;AACA,YAAMC,OAAO,GAAGF,QAAQ,CAACG,IAAT,EAAhB;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYe,OAAZ;AAEH,KALD;;AAMAH,IAAAA,UAAU,GACLK,KADL,CACWC,KAAK,IAAI;AACZnB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCkB,KAAnC;AACH,KAHL;AAIH;;AAMDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWC,GADpB;AAEI,MAAA,GAAG,EAAE,KAAKD,KAAL,CAAWE,GAFpB;AAGI,MAAA,WAAW,EAAE,KAAKC,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CADJ;AAaH;;AAlDuB;;AAmD3B;AAED,eAAeJ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Row, Col } from 'reactstrap';\nimport WeatherDisplay from '../WeatherDisplay';\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lon: null\n    }\n\n    componentDidMount() {\n        const getLocation = () => {\n            if ('geolocation' in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.setState({ lat: position.coords.latitude, lon: position.coords.longitude });\n                });\n            } else {\n                alert(\"Geolocation Failed. This usually means access was denied or HTTPS isn't running.\");\n            }\n        }\n        getLocation();\n        console.log(this.state);\n\n\n        const getWeather = async () => {\n            const response = await (await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=London&appid=fdca481f9e858844aede00aa6a7749c2`));\n            const weather = response.json()\n            console.log(weather);\n\n        }\n        getWeather()\n            .catch(error => {\n                console.log(\"There was an error:\", error);\n            });\n    }\n\n    handleClick = () => {\n        console.log('button clicked');\n    }\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <WeatherDisplay\n                            lat={this.state.lat}\n                            lon={this.state.lon}\n                            handleClick={this.handleClick}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}